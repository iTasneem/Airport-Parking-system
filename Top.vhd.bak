library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use ieee.numeric_std.all;

entity Top is
port(
reset : in std_logic;
clock : in std_logic;
fireT: in std_logic;
weathT:in std_logic;
countT:out std_logic_vector(9 downto 0);
countET:out std_logic_vector(1 downto 0);
airpotEmerT:in std_logic);

end Top;

architecture Behavioral of Top is
signal fuelT,BugT,fireTS,weathTS,countTS,countETS,airpotEmerTS;
COMPONENT airplaneParking 
port(

reset : in std_logic;
clock : in std_logic;
A : in std_logic;
B : in std_logic;
aE : in std_logic;--airplane emergency
pE: in std_logic;--airport emergency
entranceA : out std_logic; 
exitB : out std_logic;
enterAE: out std_logic;
L : out std_logic;
count : out std_logic_vector(9 downto 0);
countE : out std_logic_vector(1 downto 0)
);
	end component;
COMPONENT airplane 
port(
reset : in std_logic;
clock : in std_logic;
entranceA : in std_logic;--enable enter
exitB : in std_logic;--enable exit
enterAE: in std_logic;--enable enter emergency
L : in  std_logic;--order to leave
fuel: in  std_logic;--fuel
bug: in  std_logic;--bug 
aE : out std_logic;--airplane emergency(request)
A: out std_logic; --request to enter
B : out std_logic--request to leave
);

	end component;
COMPONENT airportE 

port(
    clock     : in std_logic;
    reset    : in std_logic; 
    fire : in std_logic;
	weth: in std_logic;
	pE   : out std_logic
	);
	end component;
	
begin
airpl :airplane PORT map(fuel<=fuelT;bug<=BugT);
airemer : airportE port map(fire<=fireTS;weth<=weathTS;pE<=airpotEmerTS);
 park : airplaneParking port map(count<=countTS;countE<=countETS);
process(clock)
begin

if(rising_edge(clock)) then
if reset='1' then 
	fuelT<='0';
	weathT<='0';
end if;

fireT<=fireTS;
weathT<=weathTS;
airpotEmerT<=airpotEmerTS;
countT<=countTS;
countET<=countETS;

end if;
end process;
end Behavioral;
